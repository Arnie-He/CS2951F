import numpy as np
from mdp import MDP


class GridWorld(MDP):
    def __init__(self, gamma: float = 0.9):
        """
        Create the tensors T (A x S x S), R (A x S), and p0 (S).
        Example:
          T[0, 0, 4] = 0.9 (probability of transitioning to state 4 from state 0
           upon taking action NORTH)
          R[0, 4] = 0 (the reward from the current state 4 taking action NORTH)
          p0[0] = 1.0 (the agent always starts at state 0)
        For the implementation of the MDP base class please take a look at the
        mdp.py file in the folder.
        NOTE: Remember that there are states adjacent to walls and the obstacle.
        """

        state_size = 12
        action_size = 4

        p0 = np.zeros(state_size)
        p0[0] = 1.

        T_up = np.array([
            # ROW 1
            [0.1, 0.1, 0.0, 0.0,
             0.8, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.1, 0.8, 0.1, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.1, 0.0, 0.1,
             0.0, 0.0, 0.8, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.1, 0.1,
             0.0, 0.0, 0.0, 0.8,
             0.0, 0.0, 0.0, 0.0, 0.0],

            # ROW 2
            [0.0, 0.0, 0.0, 0.0,
             0.2, 0.0, 0.0, 0.0,
             0.8, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 1.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.1, 0.1,
             0.0, 0.0, 0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],

            # ROW 3
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.9, 0.1, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.1, 0.8, 0.1, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.1, 0.8, 0.1, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
        ])

        T_right = np.array([
            # ROW 1
            [0.1, 0.8, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.2, 0.8, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.1, 0.8,
             0.0, 0.0, 0.1, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.9,
             0.0, 0.0, 0.0, 0.1,
             0.0, 0.0, 0.0, 0.0, 0.0],

            # ROW 2
            [0.1, 0.0, 0.0, 0.0,
             0.8, 0.0, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 1.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.1, 0.0,
             0.0, 0.0, 0.0, 0.8,
             0.0, 0.0, 0.1, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],

            # ROW 3
            [0.0, 0.0, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0,
             0.1, 0.8, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.2, 0.8, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.1, 0.0,
             0.0, 0.0, 0.1, 0.8, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
        ])

        T_down = np.array([
            # ROW 1
            [0.9, 0.1, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.1, 0.8, 0.1, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.1, 0.8, 0.1,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.1, 0.9,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],

            # ROW 2
            [0.8, 0.0, 0.0, 0.0,
             0.2, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 1.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.8, 0.0,
             0.0, 0.0, 0.1, 0.1,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],

            # ROW 3
            [0.0, 0.0, 0.0, 0.0,
             0.8, 0.0, 0.0, 0.0,
             0.1, 0.1, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.1, 0.8, 0.1, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.8, 0.0,
             0.0, 0.1, 0.0, 0.1, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
        ])

        T_left = np.array([
            # ROW 1
            [0.9, 0.0, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.8, 0.2, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.8, 0.1, 0.0,
             0.0, 0.0, 0.1, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.8, 0.1,
             0.0, 0.0, 0.0, 0.1,
             0.0, 0.0, 0.0, 0.0, 0.0],

            # ROW 2
            [0.1, 0.0, 0.0, 0.0,
             0.8, 0.0, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 1.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.1, 0.0,
             0.0, 0.0, 0.8, 0.0,
             0.0, 0.0, 0.1, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],

            # ROW 3
            [0.0, 0.0, 0.0, 0.0,
             0.1, 0.0, 0.0, 0.0,
             0.9, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.8, 0.2, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.1, 0.0,
             0.0, 0.8, 0.1, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 1.0],
        ])

        T = np.array([T_up, T_right, T_down, T_left])

        R = np.zeros((4, 12), dtype=float)
        R[:, 11] = 1.
        R[:, 7] = -1.

        # Initialize MDP
        super().__init__(T, R, p0, gamma=gamma)

def features_to_state(features: np.ndarray):
    if features[-1] == 1:
        return 12
    if features[-2] == 1:
        return 7
    if features[-3] == 1:
        return 11

    x_one_hot, y_one_hot = features[:4], features[4:-1]
    x = np.argmax(x_one_hot)
    y = np.argmax(y_one_hot)
    return int(y * 4 + x)

def optimal_policy(features: np.ndarray):
    optimal_policy = np.array([0, 3, 0, 3, 0, 0, 0, 0, 1, 1, 1, 0], dtype=int)

    return optimal_policy[features_to_state(features)]
